image: docker:20.10.16

services:
  - docker:dind

stages:
  - retrieve-secrets
  - validate
  - deploy
  - rollback
  - notify
  

variables:
  GIT_DEPTH: 0
  MINIO_SERVER: "http://172.19.0.3:9000"
  VAULT_ADDR: "https://vault.medhelper.xyz:8200"
  STATUS_FILE: "status.json"


retrieve-secrets:
  stage: retrieve-secrets
  image: alpine:3.16
  script:
    - |
      echo '{"retrieve-secrets": "failed"}' > $STATUS_FILE
    - apk add --no-cache curl jq
    - >
      curl --fail --silent --header "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/kv/secrets" 
      | jq -r '.data.login' > login_minio

    - >
      curl --fail --silent --header "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/kv/secrets" 
      | jq -r '.data.password' > password_minio

    - >
      curl --fail --silent --header "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/kv/secrets" 
      | jq -r '.data.telegram_token' > telegram_token_minio
    
    - >
      curl --fail --silent --header "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/kv/secrets" 
      | jq -r '.data.telegramchannelid' > telegramchannelid_minio

    - |
      echo '{"retrieve-secrets": "success"}' > $STATUS_FILE
  artifacts:
    paths:
      - login_minio
      - password_minio
      - telegram_token_minio
      - telegramchannelid_minio
      - $STATUS_FILE
    expire_in: 1h



validate-buckets:
  stage: validate
  script:
    - apk add --no-cache curl jq
    - |
      jq '. + {"validate-buckets": "failed"}' $STATUS_FILE > tmp && mv tmp $STATUS_FILE
    - apk add --no-cache python3 py3-pip
    - pip install jsonschema
    - python3 validateBucket.py 
    - |
      jq '. + {"validate-buckets": "success"}' $STATUS_FILE > tmp && mv tmp $STATUS_FILE
  rules:
    - changes:
        - buckets.json  
  artifacts:
    paths:
      - login_minio
      - password_minio
      - telegram_token_minio
      - telegramchannelid_minio
      - $STATUS_FILE

validate-users:
  stage: validate
  script:
    - apk add --no-cache curl jq
    - |
      jq '. + {"validate-users": "failed"}' $STATUS_FILE > tmp && mv tmp $STATUS_FILE
    - apk add --no-cache python3 py3-pip
    - pip install jsonschema
    - python3 validateUsers.py 
    - |
      jq '. + {"validate-users": "success"}' $STATUS_FILE > tmp && mv tmp $STATUS_FILE
  rules:
    - changes:
        - users.json
  artifacts:
    paths:
      - login_minio
      - password_minio
      - telegram_token_minio
      - telegramchannelid_minio
      - $STATUS_FILE

deploy-buckets:
  stage: deploy
  tags:
    - local  
  script:
    - |
      jq '. + {"deploy-buckets": "failed"}' $STATUS_FILE > tmp && mv tmp $STATUS_FILE
    - mc alias set local $MINIO_SERVER $(cat login_minio) $(cat password_minio)
    
    - echo "Creating buckets"
    - |
      jq -r '.buckets.create[].name' buckets.json | while read bucket; do
        mc mb local/$bucket || echo "Bucket $bucket already exists."
      done
    
    - echo "Deleting buckets"
    - |
      jq -r '.buckets.delete[].name' buckets.json | while read bucket; do
        mc rb local/$bucket --force || echo "Bucket $bucket does not exist."
      done
    - |
      jq '. + {"deploy-buckets": "success"}' $STATUS_FILE > tmp && mv tmp $STATUS_FILE
  rules:
    - changes:
        - buckets.json
  dependencies:
    - validate-buckets
  when: manual
  artifacts:
    paths:
      - buckets.json
      - login_minio
      - password_minio
      - telegram_token_minio
      - telegramchannelid_minio
      - $STATUS_FILE

rollback-buckets:
  stage: rollback
  tags:
    - local  
  script:
    - |
      jq '. + {"rollback-buckets": "failed"}' $STATUS_FILE > tmp && mv tmp $STATUS_FILE
    - mc alias set local $MINIO_SERVER $(cat login_minio) $(cat password_minio)
    - |
      jq -r '.buckets.create[].name' buckets.json | while read bucket; do
        mc rb local/$bucket --force || echo "Bucket $bucket does not exist."
      done
    - |
      jq '. + {"rollback-buckets": "success"}' $STATUS_FILE > tmp && mv tmp $STATUS_FILE
  dependencies:
    - deploy-buckets
  when: on_failure


deploy-users:
  stage: deploy
  tags:
    - local  
  script:
    - |
      jq '. + {"deploy-users": "failed"}' $STATUS_FILE > tmp && mv tmp $STATUS_FILE
    - mc alias set local $MINIO_SERVER $(cat login_minio) $(cat password_minio)
    
    - echo "Creating users"
    - |
      jq -c '.users.create[]' users.json | while read user; do
        username=$(echo $user | jq -r '.username')
        password=$(echo $user | jq -r '.password')
        policies=$(echo $user | jq -r '.policies | join(" ")') 
        echo "Creating user: $username with policies: $policies"
        mc admin user add local $username $password
        for policy in $policies; do
          mc admin policy attach local $policy --user $username
        done
      done
    
    - echo "Deleting users"
    - |
      jq -r '.users.delete[]' users.json | while read username; do
        echo "Deleting user: $username"
        mc admin user remove local $username || echo "User $username does not exist."
      done
    - |
      jq '. + {"deploy-users": "success"}' $STATUS_FILE > tmp && mv tmp $STATUS_FILE
  rules:
    - changes:
        - users.json
  dependencies:
    - validate-users
  when: manual 
  artifacts:
    paths:
      - users.json
      - login_minio
      - password_minio
      - telegram_token_minio
      - telegramchannelid_minio
      - $STATUS_FILE

rollback-users:
  stage: rollback
  tags:
    - local  
  script:
    - |
      jq '. + {"rollback-users": "failed"}' $STATUS_FILE > tmp && mv tmp $STATUS_FILE
    - mc alias set local $MINIO_SERVER $(cat login_minio) $(cat password_minio)
    - |
      jq -c '.users.create[]' users.json | while read user; do
        username=$(echo $user | jq -r '.username')
        mc admin user remove local $username || echo "User $username does not exist."
      done
    - |
      jq '. + {"rollback-users": "success"}' $STATUS_FILE > tmp && mv tmp $STATUS_FILE
  dependencies:
    - deploy-users
  when: on_failure

notify_summary:
  stage: notify
  script: |
    apk add --no-cache curl jq
    TELEGRAM_TOKEN=$(cat telegram_token_minio)
    TELEGRAM_CHANNEL_ID=$(cat telegramchannelid_minio)
    TELEGRAM_API_URL="https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage"
    SUMMARY=$(jq -r 'to_entries | map("\(.key): \(.value)") | join("\n")' $STATUS_FILE)
    curl -s -X POST "$TELEGRAM_API_URL" \
      -d chat_id="$TELEGRAM_CHANNEL_ID" \
      -d text="Summary of pipeline for *$CI_PROJECT_NAME* on branch *$CI_COMMIT_REF_NAME*:
      $SUMMARY
      Pipeline: $CI_PIPELINE_URL" \
      -d parse_mode="Markdown"
  when: manual 
  artifacts:
    paths:
      - login_minio
      - password_minio
      - telegram_token_minio
      - telegramchannelid_minio
      - $STATUS_FILE
